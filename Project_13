## Задание 1
## Отобразите все записи из таблицы company по компаниям, которые закрылись.

SELECT *
FROM COMPANY
WHERE status = 'closed';

# Задание 2
## Отобразите количество привлечённых средств для новостных компаний США. Используйте данные из таблицы company. Отсортируйте таблицу по убыванию значений в поле funding_total.

SELECT funding_total
FROM company
WHERE category_code = 'news' AND country_code = 'USA'
GROUP BY funding_total
ORDER BY funding_total DESC;

# Задание 3
## Найдите общую сумму сделок по покупке одних компаний другими в долларах. Отберите сделки, которые осуществлялись только за наличные с 2011 по 2013 год включительно.

SELECT SUM(price_amount)
FROM acquisition
WHERE term_code = 'cash' 
  AND EXTRACT(YEAR FROM CAST(acquired_at AS DATE)) BETWEEN 2011 AND 2013;

# Задание 4
## Отобразите имя, фамилию и названия аккаунтов людей в поле network_username, у которых названия аккаунтов начинаются на 'Silver'.

SELECT first_name, last_name, network_username
FROM people
WHERE network_username LIKE 'Silver%';

# Задание 5
## Выведите на экран всю информацию о людях, у которых названия аккаунтов в поле network_username содержат подстроку 'money', а фамилия начинается на 'K'.

SELECT *
FROM people 
WHERE network_username LIKE '%money%'  AND last_name like 'K%';

# Задание 6
## Для каждой страны отобразите общую сумму привлечённых инвестиций, которые получили компании, зарегистрированные в этой стране. Страну, в которой зарегистрирована компания, можно определить по коду страны. Отсортируйте данные по убыванию суммы.

SELECT country_code, SUM(funding_total) AS total_funding
FROM company
GROUP BY country_code
ORDER BY total_funding DESC;

# Задание 7
## Составьте таблицу, в которую войдёт дата проведения раунда, а также минимальное и максимальное значения суммы инвестиций, привлечённых в эту дату.
Оставьте в итоговой таблице только те записи, в которых минимальное значение суммы инвестиций не равно нулю и не равно максимальному значению.

SELECT CAST(funded_at AS DATE), MIN(raised_amount), MAX(raised_amount)
FROM funding_round
GROUP BY CAST(funded_at AS DATE)
HAVING MIN(raised_amount) != 0 AND MIN(raised_amount) <> MAX(raised_amount);

# Задание 8
## Создайте поле с категориями:
Для фондов, которые инвестируют в 100 и более компаний, назначьте категорию high_activity.
Для фондов, которые инвестируют в 20 и более компаний до 100, назначьте категорию middle_activity.
Если количество инвестируемых компаний фонда не достигает 20, назначьте категорию low_activity.
Отобразите все поля таблицы fund и новое поле с категориями.
SELECT *,
       CASE
           WHEN invested_companies > 100 THEN 'high_activity'
           WHEN invested_companies >= 20 THEN 'middle_activity'
           WHEN invested_companies < 20 THEN 'low_activity'
           END AS activity_level
FROM fund;

# Задание 9
## Для каждой из категорий, назначенных в предыдущем задании, посчитайте округлённое до ближайшего целого числа среднее количество инвестиционных раундов, в которых фонд принимал участие. Выведите на экран категории и среднее число инвестиционных раундов. Отсортируйте таблицу по возрастанию среднего.

SELECT 
    CASE
        WHEN invested_companies >= 100 THEN 'high_activity'
        WHEN invested_companies >= 20 THEN 'middle_activity'
        ELSE 'low_activity'
    END AS activity,
    ROUND(AVG(investment_rounds)) AS average_investment_rounds
FROM fund
GROUP BY activity
ORDER BY average_investment_rounds;

# Задание 10
## Проанализируйте, в каких странах находятся фонды, которые чаще всего инвестируют в стартапы. 
Для каждой страны посчитайте минимальное, максимальное и среднее число компаний, в которые инвестировали фонды этой страны, основанные с 2010 по 2012 год включительно. Исключите страны с фондами, у которых минимальное число компаний, получивших инвестиции, равно нулю. 
Выгрузите десять самых активных стран-инвесторов: отсортируйте таблицу по среднему количеству компаний от большего к меньшему. Затем добавьте сортировку по коду страны в лексикографическом порядке.

SELECT country_code, MIN(invested_companies), MAX(invested_companies), AVG(invested_companies)
FROM fund
WHERE EXTRACT(YEAR FROM founded_at) IN (2010, 2011, 2012)
GROUP BY country_code
HAVING MIN(invested_companies) <> 0
ORDER BY AVG(invested_companies) DESC, country_code
LIMIT 10;

# Задание 11
## Отобразите имя и фамилию всех сотрудников стартапов. Добавьте поле с названием учебного заведения, которое окончил сотрудник, если эта информация известна.

SELECT p.first_name, p.last_name, e.institution
FROM people AS p
LEFT JOIN education AS e ON p.id = e.person_id;

# Задание 12
## Для каждой компании найдите количество учебных заведений, которые окончили её сотрудники. Выведите название компании и число уникальных названий учебных заведений. Составьте топ-5 компаний по количеству университетов.

SELECT c.name, COUNT(DISTINCT e.institution) AS distinct_institutions
FROM company AS c
JOIN people AS p ON c.id = p.company_id
JOIN education AS e ON p.id = e.person_id
GROUP BY c.name
ORDER BY distinct_institutions DESC
LIMIT 5;

# Задание 13
## Составьте список с уникальными названиями закрытых компаний, для которых первый раунд финансирования оказался последним.

SELECT DISTINCT c.name
FROM company AS c
JOIN funding_round AS f ON c.id = f.company_id
WHERE c.status = 'closed' AND f.is_first_round = 1 AND f.is_last_round = 1;

# Задание 14
## Составьте список уникальных номеров сотрудников, которые работают в компаниях, отобранных в предыдущем задании.

SELECT DISTINCT id
FROM people
WHERE company_id IN (
    SELECT c.id
    FROM company AS c
    JOIN funding_round AS f ON c.id = f.company_id
    WHERE c.status = 'closed' AND f.is_first_round = 1 AND f.is_last_round = 1
    GROUP BY c.id
);

# Задание 15
## Составьте таблицу, куда войдут уникальные пары с номерами сотрудников из предыдущей задачи и учебным заведением, которое окончил сотрудник.

SELECT DISTINCT person_id, institution
FROM education
WHERE person_id IN (
    SELECT DISTINCT id
    FROM people
    WHERE company_id IN (
        SELECT c.id
        FROM company AS c
        JOIN funding_round AS f ON c.id = f.company_id
        WHERE c.status = 'closed' AND f.is_first_round = 1 AND f.is_last_round = 1
        GROUP BY c.id
    )
);

# Задание 16
## Посчитайте количество учебных заведений для каждого сотрудника из предыдущего задания. При подсчёте учитывайте, что некоторые сотрудники могли окончить одно и то же заведение дважды.

SELECT DISTINCT person_id, COUNT(institution) AS institution_count
FROM education
WHERE person_id IN (
    SELECT DISTINCT id
    FROM people
    WHERE company_id IN (
        SELECT c.id
        FROM company AS c
        JOIN funding_round AS f ON c.id = f.company_id
        WHERE c.status = 'closed' AND f.is_first_round = 1 AND f.is_last_round = 1
        GROUP BY c.id
    )
)
GROUP BY person_id;

# Задание 17
## Дополните предыдущий запрос и выведите среднее число учебных заведений (всех, не только уникальных), которые окончили сотрудники разных компаний. Нужно вывести только одну запись, группировка здесь не понадобится.

WITH a AS (
    SELECT DISTINCT person_id, COUNT(institution) AS count
    FROM education
    WHERE person_id IN (
        SELECT DISTINCT id
        FROM people
        WHERE company_id IN (
            SELECT c.id
            FROM company AS c
            JOIN funding_round AS f ON c.id = f.company_id
            WHERE c.status = 'closed' AND f.is_first_round = 1 AND f.is_last_round = 1
            GROUP BY c.id
        )
    )
    GROUP BY person_id
)
SELECT AVG(count) AS average_institution_count
FROM a;

# Задание 18
## Напишите похожий запрос: выведите среднее число учебных заведений (всех, не только уникальных), которые окончили сотрудники Socialnet.

WITH base AS (
    SELECT p.id, COUNT(e.institution) AS institution_count
    FROM people AS p
    JOIN education AS e ON p.id = e.person_id
    WHERE p.company_id IN (
        SELECT id
        FROM company
        WHERE name = 'Socialnet'
    )
    GROUP BY p.id
)
SELECT AVG(institution_count) AS average_institution_count
FROM base;

# Задание 19
## Составьте таблицу из полей:
name_of_fund — название фонда;
name_of_company — название компании;
amount — сумма инвестиций, которую привлекла компания в раунде.
В таблицу войдут данные о компаниях, в истории которых было больше шести важных этапов, а раунды финансирования проходили с 2012 по 2013 год включительно.

SELECT f.name AS name_of_fund, c.name AS name_of_company, fu.raised_amount AS amount
FROM fund AS f
JOIN investment AS i ON f.id = i.fund_id
JOIN funding_round AS fu ON i.funding_round_id = fu.id
JOIN company AS c ON fu.company_id = c.id
WHERE c.milestones > 6
  AND fu.funded_at BETWEEN '2012-01-01' AND '2013-12-31';

# Задание 20

## Выгрузите таблицу, в которой будут такие поля:
- название компании-покупателя;
- сумма сделки;
- название компании, которую купили;
- сумма инвестиций, вложенных в купленную компанию;
- доля, которая отображает, во сколько раз сумма покупки превысила сумму вложенных в компанию инвестиций, округлённая до ближайшего целого числа.

Не учитывайте те сделки, в которых сумма покупки равна нулю. Если сумма инвестиций в компанию равна нулю, исключите такую компанию из таблицы. 

Отсортируйте таблицу по сумме сделки от большей к меньшей, а затем по названию купленной компании в лексикографическом порядке. Ограничьте таблицу первыми десятью записями.

WITH acquiring AS (
  SELECT c.name AS buyer,
         a.price_amount AS price,
         a.id AS KEY
  FROM acquisition AS a
  JOIN company AS c ON a.acquiring_company_id = c.id
  WHERE a.price_amount > 0
),
acquired AS (
  SELECT c.name AS acquisition,
         c.funding_total AS investment,
         a.id AS KEY
  FROM acquisition AS a
  JOIN company AS c ON a.acquired_company_id = c.id
  WHERE c.funding_total > 0
)
SELECT acqn.buyer,
       acqn.price,
       acqd.acquisition,
       acqd.investment,
       ROUND(COALESCE(acqn.price / acqd.investment, 0)) AS uplift
FROM acquiring AS acqn
JOIN acquired AS acqd ON acqn.KEY = acqd.KEY
ORDER BY price DESC, acquisition
LIMIT 10;

# Задание 21
## Выгрузите таблицу, в которую войдут названия компаний из категории social, получившие финансирование с 2010 по 2013 год включительно. Проверьте, что сумма инвестиций не равна нулю. Выведите также номер месяца, в котором проходил раунд финансирования.

SELECT c.name, EXTRACT(MONTH FROM fu.funded_at) AS funding_month
FROM company AS c
JOIN funding_round AS fu ON c.id = fu.company_id
WHERE c.category_code = 'social' 
  AND fu.raised_amount > 0
  AND fu.funded_at BETWEEN '2010-01-01' AND '2013-12-31';

# Задание 22
## Отберите данные по месяцам с 2010 по 2013 год, когда проходили инвестиционные раунды. Сгруппируйте данные по номеру месяца и получите таблицу, в которой будут поля:
- номер месяца, в котором проходили раунды;
- количество уникальных названий фондов из США, которые инвестировали в этом месяце;
- количество компаний, купленных за этот месяц;
- общая сумма сделок по покупкам в этом месяце.

WITH fundings AS (
    SELECT 
        EXTRACT(MONTH FROM fr.funded_at) AS funding_month,
        COUNT(DISTINCT f.id) AS us_funds
    FROM fund AS f
    LEFT JOIN investment AS i ON f.id = i.fund_id
    LEFT JOIN funding_round AS fr ON i.funding_round_id = fr.id
    WHERE f.country_code = 'USA'
      AND EXTRACT(YEAR FROM fr.funded_at) BETWEEN 2010 AND 2013
    GROUP BY funding_month
),
acquisitions AS (
    SELECT 
        EXTRACT(MONTH FROM acq.acquired_at) AS funding_month,
        COUNT(acq.acquired_company_id) AS bought_co,
        SUM(acq.price_amount) AS sum_total
    FROM acquisition AS acq
    WHERE EXTRACT(YEAR FROM acq.acquired_at) BETWEEN 2010 AND 2013
    GROUP BY funding_month
)
SELECT 
    fnd.funding_month, 
    fnd.us_funds, 
    COALESCE(acq.bought_co, 0) AS bought_co, 
    COALESCE(acq.sum_total, 0) AS sum_total
FROM fundings AS fnd
LEFT JOIN acquisitions AS acq ON fnd.funding_month = acq.funding_month;

# Задание 23
## Составьте сводную таблицу и выведите среднюю сумму инвестиций для стран, в которых есть стартапы, зарегистрированные в 2011, 2012 и 2013 годах. Данные за каждый год должны быть в отдельном поле. Отсортируйте таблицу по среднему значению инвестиций за 2011 год от большего к меньшему.

WITH year_avg AS (
    SELECT 
        country_code AS country, 
        EXTRACT(YEAR FROM founded_at::date) AS year,
        AVG(funding_total) AS avg_funding
    FROM company
    WHERE EXTRACT(YEAR FROM founded_at::date) IN (2011, 2012, 2013)
    GROUP BY country, year
)
SELECT 
    y11.country, 
    MAX(CASE WHEN y11.year = 2011 THEN y11.avg_funding END) AS year_2011,
    MAX(CASE WHEN y11.year = 2012 THEN y11.avg_funding END) AS year_2012,
    MAX(CASE WHEN y11.year = 2013 THEN y11.avg_funding END) AS year_2013
FROM year_avg AS y11
GROUP BY y11.country
ORDER BY year_2011 DESC;









